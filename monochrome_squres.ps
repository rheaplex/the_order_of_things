%!PS-Adobe-3.0%%BeginProlog% Some handy consts/size 72 def			% unit size in points/numsquares 20 def		% number of squares/squaresize 1 def		% square size in units/origin 5 def			% centre of composition in units/drift .5 def			% square random offset from centre in units/dryrun 375 def	% the number of times to call rand before starting: Illustrator fix%randfloat% Makes a random float from 0-1/randfloat{rand 2147483647 div} % get a float from 0-1def% rectfill, modified from the Red Book 2nd ed% takes x y width height on the stack/rectfill{ 	gsave			% Store the graphics state	newpath			% Get a fresh graphics path for the rectangle	4 2 roll			% roll the stack so x and y are topmost	moveto			% x y moveto	2 1 roll dup			% Get width on top of the stack and duplicate it for later	0 rlineto			% width 0 rlineto	2 1 roll	0	2 1 roll	rlineto			% 0 height rlineto	neg				% neg width	0 rlineto			% -width 0 rlineto	closepath			% Close the rectangle and miter it nicely	fill			% fill with the current colour	grestore }			% restore the saved graphics state	def% randcolour% Randomly sets the current colour /randcolour	{ randfloat setgray } % Set the colour to a random grey	def% % randsquare% Makes a square of random colour and constant size a random offset from the origin/randsquare{	randcolour	2 { randfloat squaresize mul .5 sub } repeat	squaresize squaresize	rectfill }	def%%EndPrologsize size scale					% make everything one inch unitsorigin origin translate			% centre the origin a little out onto the pagedryrun { rand } repeatnumsquares {	% repeatrandsquare} repeatshowpage%%EOF	